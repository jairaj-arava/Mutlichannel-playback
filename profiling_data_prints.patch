diff --git a/rimage b/rimage
index 0f64a2018..246ea6469 160000
--- a/rimage
+++ b/rimage
@@ -1 +1 @@
-Subproject commit 0f64a20183a8db9bc39a4044679a51c1cc334f8f
+Subproject commit 246ea6469abdc677b7038285654fd64fc387c5f1
diff --git a/src/ipc/ipc3/handler.c b/src/ipc/ipc3/handler.c
index 020f22538..ee0c6347c 100644
--- a/src/ipc/ipc3/handler.c
+++ b/src/ipc/ipc3/handler.c
@@ -1235,7 +1235,7 @@ static int ipc_glb_tplg_comp_new(uint32_t header)
 	if (!cpu_is_me(comp->core))
 		return ipc_process_on_core(comp->core, false);
 
-	tr_dbg(&ipc_tr, "ipc: pipe %d comp %d -> new (type %d)",
+	tr_err(&ipc_tr, "ipc:  Jai pipe %d comp %d -> new (type %d)",
 	       comp->pipeline_id, comp->id, comp->type);
 
 	/* register component */
@@ -1271,7 +1271,7 @@ static int ipc_glb_tplg_buffer_new(uint32_t header)
 	if (!cpu_is_me(ipc_buffer.comp.core))
 		return ipc_process_on_core(ipc_buffer.comp.core, false);
 
-	tr_dbg(&ipc_tr, "ipc: pipe %d buffer %d -> new (0x%x bytes)",
+	tr_err(&ipc_tr, "ipc: Jai pipe %d buffer %d -> new (0x%x bytes)",
 	       ipc_buffer.comp.pipeline_id, ipc_buffer.comp.id,
 	       ipc_buffer.size);
 
@@ -1308,7 +1308,7 @@ static int ipc_glb_tplg_pipe_new(uint32_t header)
 	if (!cpu_is_me(ipc_pipeline.core))
 		return ipc_process_on_core(ipc_pipeline.core, false);
 
-	tr_dbg(&ipc_tr, "ipc: pipe %d -> new", ipc_pipeline.pipeline_id);
+	tr_err(&ipc_tr, "ipc: Jai pipe %d -> new", ipc_pipeline.pipeline_id);
 
 	ret = ipc_pipeline_new(ipc, ipc->comp_data);
 	if (ret < 0) {
@@ -1371,22 +1371,28 @@ static int ipc_glb_tplg_free(uint32_t header,
 static int ipc_glb_tplg_message(uint32_t header)
 {
 	uint32_t cmd = iCS(header);
-
+	int status;
 	switch (cmd) {
 	case SOF_IPC_TPLG_COMP_NEW:
-		return ipc_glb_tplg_comp_new(header);
+		 status= ipc_glb_tplg_comp_new(header);
+		 heap_trace_all(1);
+		 return status;
 	case SOF_IPC_TPLG_COMP_FREE:
 		return ipc_glb_tplg_free(header, ipc_comp_free);
 	case SOF_IPC_TPLG_COMP_CONNECT:
 		return ipc_glb_tplg_comp_connect(header);
 	case SOF_IPC_TPLG_PIPE_NEW:
-		return ipc_glb_tplg_pipe_new(header);
+		status= ipc_glb_tplg_pipe_new(header);
+		 heap_trace_all(1);
+		 return status;
 	case SOF_IPC_TPLG_PIPE_COMPLETE:
 		return ipc_glb_tplg_pipe_complete(header);
 	case SOF_IPC_TPLG_PIPE_FREE:
 		return ipc_glb_tplg_free(header, ipc_pipeline_free);
 	case SOF_IPC_TPLG_BUFFER_NEW:
-		return ipc_glb_tplg_buffer_new(header);
+		status= ipc_glb_tplg_buffer_new(header);
+		 heap_trace_all(1);
+		 return status;
 	case SOF_IPC_TPLG_BUFFER_FREE:
 		return ipc_glb_tplg_free(header, ipc_buffer_free);
 	default:
diff --git a/src/lib/alloc.c b/src/lib/alloc.c
index 782e2e170..97f88d3f5 100644
--- a/src/lib/alloc.c
+++ b/src/lib/alloc.c
@@ -562,20 +562,20 @@ void heap_trace(struct mm_heap *heap, int size)
 	int j;
 
 	for (i = 0; i < size; i++) {
-		tr_info(&mem_tr, " heap: 0x%x size %d blocks %d caps 0x%x",
+		tr_err(&mem_tr, " heap: 0x%x size %d blocks %d caps 0x%x",
 			heap->heap, heap->size, heap->blocks,
 			heap->caps);
-		tr_info(&mem_tr, "  used %d free %d", heap->info.used,
+		tr_err(&mem_tr, "  used %d free %d", heap->info.used,
 			heap->info.free);
 
 		/* map[j]'s base is calculated based on map[j-1] */
 		for (j = 0; j < heap->blocks; j++) {
 			current_map = &heap->map[j];
 
-			tr_info(&mem_tr, "  block %d base 0x%x size %d",
+			tr_err(&mem_tr, "  block %d base 0x%x size %d",
 				j, current_map->base,
 				current_map->block_size);
-			tr_info(&mem_tr, "   count %d free %d",
+			tr_err(&mem_tr, "   count %d free %d",
 				current_map->count,
 				current_map->free_count);
 		}
@@ -587,21 +587,21 @@ void heap_trace(struct mm_heap *heap, int size)
 void heap_trace_all(int force)
 {
 	struct mm *memmap = memmap_get();
-
+	force=1;
 	/* has heap changed since last shown */
 	if (memmap->heap_trace_updated || force) {
-		tr_info(&mem_tr, "heap: system status");
+		tr_err(&mem_tr, "heap: system status");
 		heap_trace(memmap->system, PLATFORM_HEAP_SYSTEM);
-		tr_info(&mem_tr, "heap: system runtime status");
+		tr_err(&mem_tr, "heap: system runtime status");
 		heap_trace(memmap->system_runtime, PLATFORM_HEAP_SYSTEM_RUNTIME);
-		tr_info(&mem_tr, "heap: buffer status");
+		tr_err(&mem_tr, "heap: buffer status");
 		heap_trace(memmap->buffer, PLATFORM_HEAP_BUFFER);
-		tr_info(&mem_tr, "heap: runtime status");
+		tr_err(&mem_tr, "heap: runtime status");
 		heap_trace(memmap->runtime, PLATFORM_HEAP_RUNTIME);
 #if CONFIG_CORE_COUNT > 1
-		tr_info(&mem_tr, "heap: runtime shared status");
+		tr_err(&mem_tr, "heap: runtime shared status");
 		heap_trace(memmap->runtime_shared, PLATFORM_HEAP_RUNTIME_SHARED);
-		tr_info(&mem_tr, "heap: system shared status");
+		tr_err(&mem_tr, "heap: system shared status");
 		heap_trace(memmap->system_shared, PLATFORM_HEAP_SYSTEM_SHARED);
 #endif
 	}
